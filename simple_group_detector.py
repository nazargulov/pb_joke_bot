#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–æ–≤–∞ group ID –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—ã.
"""

import json
import os
from datetime import datetime
from pathlib import Path

from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ChatMemberHandler
from telegram.constants import ChatMemberStatus, ChatType
from dotenv import load_dotenv

load_dotenv()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
GROUPS_FILE = "detected_groups.json"
groups_data = {"groups": {}, "last_updated": None}

def load_groups_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–∞—Ö"""
    global groups_data
    if Path(GROUPS_FILE).exists():
        try:
            with open(GROUPS_FILE, 'r', encoding='utf-8') as f:
                groups_data = json.load(f)
        except json.JSONDecodeError:
            groups_data = {"groups": {}, "last_updated": None}

def save_groups_data():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–∞—Ö"""
    global groups_data
    groups_data["last_updated"] = datetime.now().isoformat()
    with open(GROUPS_FILE, 'w', encoding='utf-8') as f:
        json.dump(groups_data, f, ensure_ascii=False, indent=2)
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {GROUPS_FILE}")

def save_group_info(chat_id: int, chat_title: str, chat_type: str, event_type: str = "detected"):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ"""
    global groups_data
    group_key = str(chat_id)
    
    group_info = {
        "id": chat_id,
        "title": chat_title,
        "type": chat_type,
        "first_detected": datetime.now().isoformat(),
        "last_activity": datetime.now().isoformat(),
        "event_type": event_type,
        "status": "active"
    }
    
    # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if group_key in groups_data["groups"]:
        existing = groups_data["groups"][group_key]
        group_info["first_detected"] = existing.get("first_detected", group_info["first_detected"])
        group_info["status"] = "active"
    
    groups_data["groups"][group_key] = group_info
    save_groups_data()
    
    print(f"üìù –ì—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:")
    print(f"   ID: {chat_id}")
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_title}")
    print(f"   –¢–∏–ø: {chat_type}")
    print(f"   –°–æ–±—ã—Ç–∏–µ: {event_type}")

async def bot_added_handler(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É"""
    chat_member_update = update.my_chat_member or update.chat_member
    
    if not chat_member_update:
        return
    
    chat = chat_member_update.chat
    old_status = chat_member_update.old_chat_member.status if chat_member_update.old_chat_member else None
    new_status = chat_member_update.new_chat_member.status
    
    # –ë–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É
    if (old_status in [ChatMemberStatus.LEFT, None] and 
        new_status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR]):
        
        save_group_info(
            chat_id=chat.id,
            chat_title=chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
            chat_type=chat.type,
            event_type="bot_added"
        )
        
        print(f"üöÄ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É: {chat.title} (ID: {chat.id})")
    
    # –ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã
    elif (old_status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR] and 
          new_status == ChatMemberStatus.LEFT):
        
        global groups_data
        group_key = str(chat.id)
        if group_key in groups_data["groups"]:
            groups_data["groups"][group_key]["status"] = "removed"
            groups_data["groups"][group_key]["removed_at"] = datetime.now().isoformat()
            save_groups_data()
        
        print(f"‚ùå –ë–æ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã: {chat.title} (ID: {chat.id})")

async def message_handler(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–æ–≤–∞ –≥—Ä—É–ø–ø"""
    chat = update.effective_chat
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
    if chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        save_group_info(
            chat_id=chat.id,
            chat_title=chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
            chat_type=chat.type,
            event_type="message_received"
        )

def print_current_groups():
    """–í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø"""
    global groups_data
    print("\nüìã –¢–µ–∫—É—â–∏–µ –≥—Ä—É–ø–ø—ã:")
    print("=" * 60)
    
    if not groups_data["groups"]:
        print("–ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    for group_id, info in groups_data["groups"].items():
        status_emoji = "‚úÖ" if info.get("status") == "active" else "‚ùå"
        print(f"{status_emoji} {info['title']}")
        print(f"   ID: {info['id']}")
        print(f"   –¢–∏–ø: {info['type']}")
        print(f"   –°—Ç–∞—Ç—É—Å: {info.get('status', 'unknown')}")
        print(f"   –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {info.get('event_type', 'unknown')}")
        print(f"   –ü–µ—Ä–≤–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ: {info.get('first_detected', 'unknown')}")
        if info.get("removed_at"):
            print(f"   –£–¥–∞–ª–µ–Ω: {info['removed_at']}")
        print("-" * 40)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    print("ü§ñ –ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ Group ID...")
    print(f"üìÅ –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {GROUPS_FILE}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    load_groups_data()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(bot_token).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(ChatMemberHandler(bot_added_handler, ChatMemberHandler.MY_CHAT_MEMBER))
    application.add_handler(MessageHandler(filters.ALL, message_handler))
    
    # –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–∏—Ö –≥—Ä—É–ø–ø
    print_current_groups()
    
    print("\nüöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –î–æ–±–∞–≤–ª—è–π—Ç–µ –µ–≥–æ –≤ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ª–æ–≤–∞ ID...")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        application.run_polling(drop_pending_updates=True)
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        print("üìã –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:")
        print_current_groups()

if __name__ == "__main__":
    main()