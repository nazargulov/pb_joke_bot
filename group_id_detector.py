#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–æ–≤–∞ –∏ –∑–∞–ø–∏—Å–∏ group ID –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—ã.
–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö, –≤ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω –±–æ—Ç.
"""

import asyncio
import json
import os
from datetime import datetime
from typing import Dict, Any
from pathlib import Path

from telegram import Update, Bot
from telegram.ext import Application, MessageHandler, filters, ChatMemberHandler
from telegram.constants import ChatMemberStatus, ChatType
from dotenv import load_dotenv

load_dotenv()

class GroupIDDetector:
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        if not self.bot_token:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        
        self.groups_file = "detected_groups.json"
        self.groups_data = self.load_groups_data()
        
    def load_groups_data(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–∞—Ö"""
        if Path(self.groups_file).exists():
            try:
                with open(self.groups_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except json.JSONDecodeError:
                return {"groups": {}, "last_updated": None}
        return {"groups": {}, "last_updated": None}
    
    def save_groups_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–∞—Ö"""
        self.groups_data["last_updated"] = datetime.now().isoformat()
        with open(self.groups_file, 'w', encoding='utf-8') as f:
            json.dump(self.groups_data, f, ensure_ascii=False, indent=2)
        print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.groups_file}")
    
    async def save_group_info(self, chat_id: int, chat_title: str, chat_type: str, event_type: str = "detected"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ"""
        group_key = str(chat_id)
        
        group_info = {
            "id": chat_id,
            "title": chat_title,
            "type": chat_type,
            "first_detected": datetime.now().isoformat(),
            "last_activity": datetime.now().isoformat(),
            "event_type": event_type,
            "status": "active"
        }
        
        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if group_key in self.groups_data["groups"]:
            existing = self.groups_data["groups"][group_key]
            group_info["first_detected"] = existing.get("first_detected", group_info["first_detected"])
            group_info["status"] = "active"
        
        self.groups_data["groups"][group_key] = group_info
        self.save_groups_data()
        
        print(f"üìù –ì—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:")
        print(f"   ID: {chat_id}")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_title}")
        print(f"   –¢–∏–ø: {chat_type}")
        print(f"   –°–æ–±—ã—Ç–∏–µ: {event_type}")
    
    async def bot_added_handler(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É"""
        chat_member_update = update.my_chat_member or update.chat_member
        
        if not chat_member_update:
            return
        
        chat = chat_member_update.chat
        old_status = chat_member_update.old_chat_member.status if chat_member_update.old_chat_member else None
        new_status = chat_member_update.new_chat_member.status
        
        # –ë–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É
        if (old_status in [ChatMemberStatus.LEFT, None] and 
            new_status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR]):
            
            await self.save_group_info(
                chat_id=chat.id,
                chat_title=chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                chat_type=chat.type,
                event_type="bot_added"
            )
            
            print(f"üöÄ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É: {chat.title} (ID: {chat.id})")
        
        # –ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã
        elif (old_status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR] and 
              new_status == ChatMemberStatus.LEFT):
            
            group_key = str(chat.id)
            if group_key in self.groups_data["groups"]:
                self.groups_data["groups"][group_key]["status"] = "removed"
                self.groups_data["groups"][group_key]["removed_at"] = datetime.now().isoformat()
                self.save_groups_data()
            
            print(f"‚ùå –ë–æ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã: {chat.title} (ID: {chat.id})")
    
    async def message_handler(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–æ–≤–∞ –≥—Ä—É–ø–ø"""
        chat = update.effective_chat
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
        if chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
            await self.save_group_info(
                chat_id=chat.id,
                chat_title=chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                chat_type=chat.type,
                event_type="message_received"
            )
    
    async def scan_existing_chats(self, bot: Bot):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —á–∞—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        print("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —á–∞—Ç–æ–≤...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
            updates = await bot.get_updates(limit=100, timeout=1)
            
            processed_chats = set()
            
            for update in updates:
                chat = None
                
                if update.message:
                    chat = update.message.chat
                elif update.edited_message:
                    chat = update.edited_message.chat
                elif update.channel_post:
                    chat = update.channel_post.chat
                elif update.edited_channel_post:
                    chat = update.edited_channel_post.chat
                
                if (chat and 
                    chat.type in [ChatType.GROUP, ChatType.SUPERGROUP] and 
                    chat.id not in processed_chats):
                    
                    processed_chats.add(chat.id)
                    
                    await self.save_group_info(
                        chat_id=chat.id,
                        chat_title=chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                        chat_type=chat.type,
                        event_type="startup_scan"
                    )
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(processed_chats)} –≥—Ä—É–ø–ø –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    
    def print_current_groups(self):
        """–í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø"""
        print("\nüìã –¢–µ–∫—É—â–∏–µ –≥—Ä—É–ø–ø—ã:")
        print("=" * 60)
        
        if not self.groups_data["groups"]:
            print("–ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        for group_id, info in self.groups_data["groups"].items():
            status_emoji = "‚úÖ" if info.get("status") == "active" else "‚ùå"
            print(f"{status_emoji} {info['title']}")
            print(f"   ID: {info['id']}")
            print(f"   –¢–∏–ø: {info['type']}")
            print(f"   –°—Ç–∞—Ç—É—Å: {info.get('status', 'unknown')}")
            print(f"   –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {info.get('event_type', 'unknown')}")
            print(f"   –ü–µ—Ä–≤–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ: {info.get('first_detected', 'unknown')}")
            if info.get("removed_at"):
                print(f"   –£–¥–∞–ª–µ–Ω: {info['removed_at']}")
            print("-" * 40)
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ Group ID...")
        print(f"üìÅ –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {self.groups_file}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(self.bot_token).build()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(ChatMemberHandler(self.bot_added_handler, ChatMemberHandler.MY_CHAT_MEMBER))
        application.add_handler(MessageHandler(filters.ALL, self.message_handler))
        
        # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —á–∞—Ç–æ–≤
        await self.scan_existing_chats(application.bot)
        
        # –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–∏—Ö –≥—Ä—É–ø–ø
        self.print_current_groups()
        
        print("\nüöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –î–æ–±–∞–≤–ª—è–π—Ç–µ –µ–≥–æ –≤ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ª–æ–≤–∞ ID...")
        print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await application.run_polling(drop_pending_updates=True)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    detector = None
    try:
        detector = GroupIDDetector()
        await detector.run()
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        if detector:
            print("üìã –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:")
            detector.print_current_groups()

if __name__ == "__main__":
    asyncio.run(main())